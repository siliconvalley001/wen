// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/meta.proto

package product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MetaService service

func NewMetaServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MetaService service

type MetaService interface {
	GetMetaById(ctx context.Context, in *MetaByIdRequest, opts ...client.CallOption) (*MetaResponse, error)
	GetMetaByName(ctx context.Context, in *MetaByNameRequest, opts ...client.CallOption) (*MetaResponse, error)
	GetMetaAll(ctx context.Context, in *MetaAllRequest, opts ...client.CallOption) (*MetaAllResponse, error)
}

type metaService struct {
	c    client.Client
	name string
}

func NewMetaService(name string, c client.Client) MetaService {
	return &metaService{
		c:    c,
		name: name,
	}
}

func (c *metaService) GetMetaById(ctx context.Context, in *MetaByIdRequest, opts ...client.CallOption) (*MetaResponse, error) {
	req := c.c.NewRequest(c.name, "MetaService.GetMetaById", in)
	out := new(MetaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) GetMetaByName(ctx context.Context, in *MetaByNameRequest, opts ...client.CallOption) (*MetaResponse, error) {
	req := c.c.NewRequest(c.name, "MetaService.GetMetaByName", in)
	out := new(MetaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaService) GetMetaAll(ctx context.Context, in *MetaAllRequest, opts ...client.CallOption) (*MetaAllResponse, error) {
	req := c.c.NewRequest(c.name, "MetaService.GetMetaAll", in)
	out := new(MetaAllResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetaService service

type MetaServiceHandler interface {
	GetMetaById(context.Context, *MetaByIdRequest, *MetaResponse) error
	GetMetaByName(context.Context, *MetaByNameRequest, *MetaResponse) error
	GetMetaAll(context.Context, *MetaAllRequest, *MetaAllResponse) error
}

func RegisterMetaServiceHandler(s server.Server, hdlr MetaServiceHandler, opts ...server.HandlerOption) error {
	type metaService interface {
		GetMetaById(ctx context.Context, in *MetaByIdRequest, out *MetaResponse) error
		GetMetaByName(ctx context.Context, in *MetaByNameRequest, out *MetaResponse) error
		GetMetaAll(ctx context.Context, in *MetaAllRequest, out *MetaAllResponse) error
	}
	type MetaService struct {
		metaService
	}
	h := &metaServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MetaService{h}, opts...))
}

type metaServiceHandler struct {
	MetaServiceHandler
}

func (h *metaServiceHandler) GetMetaById(ctx context.Context, in *MetaByIdRequest, out *MetaResponse) error {
	return h.MetaServiceHandler.GetMetaById(ctx, in, out)
}

func (h *metaServiceHandler) GetMetaByName(ctx context.Context, in *MetaByNameRequest, out *MetaResponse) error {
	return h.MetaServiceHandler.GetMetaByName(ctx, in, out)
}

func (h *metaServiceHandler) GetMetaAll(ctx context.Context, in *MetaAllRequest, out *MetaAllResponse) error {
	return h.MetaServiceHandler.GetMetaAll(ctx, in, out)
}
